#!/usr/bin/env python3

import pickle
import os.path
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from googleapiclient.http import MediaIoBaseDownload
from googleapiclient.http import MediaFileUpload
import io
import sys
import mimetypes
from os.path import expanduser
import threading
import time

CHUNK_SIZE = 1024 * 1024 # 1MB

HOME = expanduser("~")
GDRIVE_PATH = HOME + '/.gdrive/'
CREDENTIALS_PATH = GDRIVE_PATH + 'credentials.json'
TOKEN_PATH = GDRIVE_PATH + 'token.pickle'

# If modifying these scopes, delete the file token.pickle.
SCOPES = [
    'https://www.googleapis.com/auth/drive',
    'https://www.googleapis.com/auth/drive.metadata'
]

functions = ['download', 'upload']

def init():
    """Shows basic usage of the Drive v3 API.
    Prints the names and ids of the first 10 files the user has access to.
    """
    creds = None
    # The file token.pickle stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if os.path.exists(TOKEN_PATH):
        with open(TOKEN_PATH, 'rb') as token:
            creds = pickle.load(token)
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                CREDENTIALS_PATH, SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the credentials for the next run
        with open(TOKEN_PATH, 'wb') as token:
            pickle.dump(creds, token)
    service = build('drive', 'v3', credentials=creds)
    return service

def get_filename(service, file_id):
    filename = 'gdrive-file'
    try:
        file_metadata = service.files().get(fileId=file_id, fields='name').execute()
        filename = file_metadata['name']
    except Exception as err:
        print('An error happened while getting file name.')
        print(err)

    print('Filename is "%s" for ID: %s.' % (filename, file_id))
    return filename

def size_to_human_readable(num, suffix='B'):
    for unit in ['','K','M','G','T']:
        if abs(num) < 1024.0:
            return "%3.1f%s%s" % (num, unit, suffix)
        num /= 1024.0

def upload(service, filepath):
    guessed_type = mimetypes.guess_type(filepath, True)
    if guessed_type is None:
        print('Wasn`t able to guess mimetype.')
        return
    mime_type = guessed_type[0]

    filename = filepath.split('/')[-1]
    print('Uploading the file: %s' % filename)

    try:
        file_metadata = {'name': filename}

        media = MediaFileUpload(filepath,
                                mimetype=mime_type,
                                resumable=True,
                                chunksize=CHUNK_SIZE)

        created_file = service.files().create(body=file_metadata,
                                              media_body=media,
                                              fields='id')
        upload_loop(created_file)
    except Exception as err:
        print('An error occurred while uploading the file.')
        print(err)

def upload_loop(created_file):
    try:
        start_time = time.time()
        last_time = time.time()
        last_size = 0.0
        response = None
        print("Uploading 0%", end='\r')
        while response is None:
            status, response = created_file.next_chunk()
            if status:
                threading.Thread(target=interpret_progress,
                                 args=("Uploading", status, start_time, last_size, last_time),
                                 daemon=True).start()
                last_size = status.resumable_progress
                last_time = time.time() 
        timer = time.strftime("%H:%M:%S", time.gmtime(time.time() - start_time))
        print()
        print("Uploading 100%")
        print('File ID: %s \n' % response.get('id'))
    except Exception as err:
        print('An error occurred while uploading the file.')
        print(err)

def download(service, file_id):
    if file_id is None:
        print('Please inform the ID of the file you want to download. Exiting..')
        return

    filename = get_filename(service, file_id)

    try:
        request = service.files().get_media(fileId=file_id)

        fh = io.FileIO(filename, 'wb')
        downloader = MediaIoBaseDownload(fh, request, chunksize=CHUNK_SIZE)
        download_loop(downloader)
    except Exception as err:
        print('An error happened while downloading the file.')
        print(err)

def download_loop(downloader):
    try:
        start_time = time.time()
        last_time = time.time()
        last_size = 0.0
        done = False
        print("Downloading 0%", end='\r')
        while done is False:
            status, done = downloader.next_chunk()
            threading.Thread(target=interpret_progress,
                             args=("Downloading", status, start_time, last_size, last_time),
                             daemon=True).start()
            last_size = status.resumable_progress
            last_time = time.time() 
        timer = time.strftime("%H:%M:%S", time.gmtime(time.time() - start_time))
        print()
        print("Downloading 100% - %s \n" % (timer))
    except Exception as err:
        print('An error happened while downloading the file.')
        print(err)

def interpret_progress(service, status, start_time, previous_size, previous_time):
    progress = int(status.progress() * 100)
    total_size = size_to_human_readable(status.total_size)
    current_size = status.resumable_progress
    size = size_to_human_readable(current_size)

    current_time = time.time()    
    timer = time.strftime("%H:%M:%S", time.gmtime(current_time - start_time))

    diff_size = current_size - previous_size
    diff_time = current_time - previous_time
    bps = diff_size / diff_time
    speed = size_to_human_readable(bps)

    estimated_time = (status.total_size - current_size) / bps
    eta = time.strftime("%H:%M:%S", time.gmtime(estimated_time))
        
    print("%s %d%% - %s/%s - %s - %s/s - ETA: %s" % (service, progress, size, total_size, timer, speed, eta), end='\r')
    return current_size, current_time

def main():
    #print('Argument List:', str(sys.argv))
    args_size = len(sys.argv)
    if args_size < 3:
        print('Not enough arguments. Exiting..')
        return

    func = sys.argv[1]
    if func not in functions:
        print('This function is not implemented yet.')
        return

    service = init()
    if service is None:
        print('Failed to start service. Exiting..')
        return


    if func == 'download':
        download(service, sys.argv[2])
    else:
        upload(service, sys.argv[2])

if __name__ == '__main__':
    main()
